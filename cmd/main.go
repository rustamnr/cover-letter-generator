package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"

	"github.com/gin-contrib/sessions"
	"github.com/gin-contrib/sessions/cookie"
	"github.com/gin-gonic/gin"
	"github.com/go-resty/resty/v2"
	_ "github.com/joho/godotenv/autoload"
)

const (
	hhAuthURL  = "https://hh.ru/oauth/authorize"
	hhTokenURL = "https://hh.ru/oauth/token"
	hhAPIURL   = "https://api.hh.ru"
)

var (
	clientID     string
	clientSecret string
	redirectURI  string
)

// HHClient - –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å hh.ru API
type HHClient struct {
	httpClient *resty.Client
}

// NewHHClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
func NewHHClient() *HHClient {
	return &HHClient{
		httpClient: resty.New(),
	}
}

// üîπ 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ hh.ru
func (h *HHClient) AuthHandler(c *gin.Context) {
	authURL := fmt.Sprintf("%s?response_type=code&client_id=%s&redirect_uri=%s",
		hhAuthURL, clientID, url.QueryEscape(redirectURI))
	c.Redirect(http.StatusFound, authURL)
}

// üîπ 2. –ü–æ–ª—É—á–µ–Ω–∏–µ access_token
func (h *HHClient) CallbackHandler(c *gin.Context) {
	code := c.Query("code")
	if code == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "code not found"})
		return
	}

	// –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–º–µ–Ω `code` -> `access_token`
	resp, err := h.httpClient.R().
		SetFormData(map[string]string{
			"grant_type":    "authorization_code",
			"client_id":     clientID,
			"client_secret": clientSecret,
			"code":          code,
			"redirect_uri":  redirectURI,
		}).
		Post(hhTokenURL)

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ hh.ru"})
		return
	}

	if resp.StatusCode() != http.StatusOK {
		c.JSON(resp.StatusCode(), gin.H{"error": resp.String()})
		return
	}

	var tokenData map[string]interface{}
	if err := json.Unmarshal(resp.Body(), &tokenData); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞"})
		return
	}

	accessToken, ok := tokenData["access_token"].(string)
	if !ok {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "access_token not found"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º user_id
	userID, err := h.getUserID(accessToken)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id"})
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –≤ —Å–µ—Å—Å–∏—é
	session := sessions.Default(c)
	session.Set("access_token", accessToken)
	session.Set("user_id", userID)
	session.Save()

	c.JSON(http.StatusOK, gin.H{
		"message":      "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!",
		"user_id":      userID,
		"access_token": accessToken,
	})
}

// üîπ 3. –ü–æ–ª—É—á–µ–Ω–∏–µ user_id (—á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, –∫—Ç–æ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω)
func (h *HHClient) getUserID(accessToken string) (string, error) {
	resp, err := h.httpClient.R().
		SetHeader("Authorization", "Bearer "+accessToken).
		SetHeader("Accept", "application/json").
		Get(hhAPIURL + "/me")

	if err != nil || resp.StatusCode() != http.StatusOK {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id")
	}

	var userData map[string]interface{}
	if err := json.Unmarshal(resp.Body(), &userData); err != nil {
		return "", err
	}

	userID, ok := userData["id"].(string)
	if !ok {
		return "", fmt.Errorf("user_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	return userID, nil
}

// üîπ 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *HHClient) GetUserResumesHandler(c *gin.Context) {
	session := sessions.Default(c)
	accessToken := session.Get("access_token")
	userID := session.Get("user_id")

	if accessToken == nil || userID == nil {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "User not authenticated"})
		return
	}

	resp, err := h.httpClient.R().
		SetHeader("Authorization", "Bearer "+accessToken.(string)).
		SetHeader("Accept", "application/json").
		Get(hhAPIURL + "/resumes/mine")

	if err != nil || resp.StatusCode() != http.StatusOK {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"})
		return
	}

	var result map[string]interface{}
	if err := json.Unmarshal(resp.Body(), &result); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	c.JSON(http.StatusOK, result)
}

func main() {
	clientID = os.Getenv("CLIENT_ID")
	clientSecret = os.Getenv("CLIENT_SECRET")

	if clientID == "" || clientSecret == "" {
		log.Fatal("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	hhClient := NewHHClient()
	router := gin.Default()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º cookie
	store := cookie.NewStore([]byte("secret"))
	router.Use(sessions.Sessions("my_session", store))

	// üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	router.GET("/auth", hhClient.AuthHandler)
	router.GET("/auth/callback", hhClient.CallbackHandler)

	// üîπ –î–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—é–º–µ
	router.GET("/resumes/mine", hhClient.GetUserResumesHandler)

	log.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	log.Fatal(router.Run(":8080"))
}
